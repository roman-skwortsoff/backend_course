from elasticsearch import AsyncElasticsearch
from motor.motor_asyncio import AsyncIOMotorDatabase
from bson import ObjectId
from typing import Dict, Any
import logging
from elasticsearch.helpers import async_bulk


logger = logging.getLogger(__name__)


async def transfer_logs_to_elasticsearch(
    mongo_db: AsyncIOMotorDatabase,
    es_client: AsyncElasticsearch,
    index_name: str = "request_logs"
) -> None:
    try:
        logger.info("üîÅ –ù–∞—á–∏–Ω–∞–µ–º –ø–µ—Ä–µ–Ω–æ—Å –ª–æ–≥–æ–≤ –∏–∑ MongoDB –≤ Elasticsearch...")

        cursor = mongo_db.request_logs.find({
            "method": {"$ne": "GET"},
            "transferred_to_es": {"$ne": True}
        })

        logs = await cursor.to_list(length=None)

        logger.debug(f"üîç –ù–∞–π–¥–µ–Ω–æ –ª–æ–≥–æ–≤ –¥–ª—è –ø–µ—Ä–µ–Ω–æ—Å–∞: {len(logs)}")

        if not logs:
            logger.info("‚ÑπÔ∏è –ù–µ—Ç –Ω–æ–≤—ã—Ö –ª–æ–≥–æ–≤ –¥–ª—è –ø–µ—Ä–µ–Ω–æ—Å–∞")
            return

        actions = []
        ids = []

        for log in logs:
            log_id = log["_id"]
            ids.append(log_id)

            logger.debug(f"üìÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ª–æ–≥: {log}")

            source = dict(log)
            source.pop("_id", None)  # —É–¥–∞–ª—è–µ–º –ø–æ–ª–µ _id –∏–∑ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ

            actions.append({
                "_index": index_name,
                "_id": str(log_id),     # –∏—Å–ø–æ–ª—å–∑—É–µ–º _id –∫–∞–∫ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
                "_source": source,      # –±–µ–∑ _id –≤–Ω—É—Ç—Ä–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞
            })

        logger.info(f"üì¶ –ü–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–æ {len(actions)} –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è bulk-–∑–∞–ø—Ä–æ—Å–∞")

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º bulk
        success, errors = await async_bulk(es_client, actions, raise_on_error=False)

        logger.info(f"üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: success={success}, errors={len(errors)}")

        if errors:
            logger.warning(f"‚ö† –û—à–∏–±–∫–∏ –ø—Ä–∏ –∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏ {len(errors)} –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤:")
            for err in errors[:5]:  # –≤—ã–≤–æ–¥–∏–º –ø–µ—Ä–≤—ã–µ 5 –æ—à–∏–±–æ–∫
                logger.warning(f"‚õî {err}")

        if success:
            update_result = await mongo_db.request_logs.update_many(
                {"_id": {"$in": ids}},
                {"$set": {"transferred_to_es": True}}
            )
            logger.info(f"üìù –û–±–Ω–æ–≤–ª–µ–Ω–æ {update_result.modified_count} –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –≤ MongoDB")

        logger.info(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–Ω–µ—Å–ª–∏ {success} –ª–æ–≥–æ–≤ –≤ Elasticsearch")

    except Exception as e:
        logger.error(f"üî• –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–Ω–æ—Å–µ –ª–æ–≥–æ–≤: {e}", exc_info=True)
        raise