version: '3.8'

services:
  # kafka:
  #   image: bitnami/kafka:latest
  #   container_name: kafka
  #   ports:
  #     - "9092:9092"
  #   environment:
  #     - KAFKA_KRAFT_MODE_ENABLED=true
  #     - KAFKA_CFG_NODE_ID=1
  #     - KAFKA_CFG_PROCESS_ROLES=controller,broker
  #     - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=1@kafka:9093
  #     - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093
  #     - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT
  #     - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
  #     - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092
  #     - KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE=true
  #     - KAFKA_CFG_LOG_RETENTION_HOURS=1
  #     - KAFKA_CFG_NUM_PARTITIONS=1
  #   volumes:
  #     - kafka_data:/bitnami/kafka

  postgres:
    image: postgres:15
    container_name: postgres
    environment:
      POSTGRES_DB: ${DB_NAME}
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASS}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    restart: always

  redis:
    image: redis:7
    container_name: redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    restart: always

  mongo:
    image: mongo:latest
    ports:
      - "27017:27017"
    volumes:
      - mongo_data:/data/db
      - ./mongo-init.js:/docker-entrypoint-initdb.d/init.js
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_PASSWORD}
      MONGO_INITDB_DATABASE: admin
    restart: always

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.9.0
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - ES_JAVA_OPTS=-Xms1g -Xmx1g
    volumes:
      - es_data:/usr/share/elasticsearch/data
    ports:
      - "9200:9200"
    healthcheck:
      test: ["CMD-SHELL", "curl -s -k http://localhost:9200/_cluster/health | grep -q '\"status\":\"green\"' || exit 1"]
      interval: 10s
      timeout: 10s
      retries: 10

  backend:
    build:
      context: .
    command: >
      sh -c "alembic upgrade head && uvicorn app.main:app --reload --host 0.0.0.0 --port 8000"
    volumes:
      - .:/app
    depends_on:
      - mongo
      - postgres
      - redis
      # - kafka
      - elasticsearch
    env_file:
      - .env
    ports:
      - "8000:8000"

  # celery:
  #   build:
  #     context: .
  #   command: celery -A app.tasks.celery_app:celery_instance worker -l INFO -B
  #   volumes:
  #     - .:/app
  #   depends_on:
  #     - backend
  #     - redis
  #   env_file:
  #     - .env

  # kafka-consumer:
  #   build:
  #     context: .
  #   command: python app/kafka/consumer.py
  #   volumes:
  #     - .:/app
  #   depends_on:
  #     - kafka
  #     - backend
  #   env_file:
  #     - .env

  # booking-consumer:
  #   build:
  #     context: .
  #   command: python app/kafka/booking_consumer.py
  #   volumes:
  #     - .:/app
  #   depends_on:
  #     - kafka
  #     - backend
  #   env_file:
  #     - .env


volumes:
  es_data:
  kafka_data:
  postgres_data:
  redis_data:
  mongo_data:
